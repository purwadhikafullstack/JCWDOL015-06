// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  avatar    String?
  role      Role
  storeId   Int?
  store     Store?   @relation(fields: [storeId], references: [id])
  isVerify  Int      @default(0)
  mobileNum Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart Cart[]
}

enum Role {
  SUPER_ADMIN
  STORE_ADMIN
  USER
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]
}

model Product {
  id                Int       @id @default(autoincrement())
  price             Int
  image_url         String?
  categoryId        Int
  category          Category  @relation(fields: [categoryId], references: [id])
  productDiscountId Int?
  productDiscount   Discount? @relation(fields: [productDiscountId], references: [id])
  productName       String
  desc              String
  weight            Int
  Stock             Stock[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Discount {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  discountType        DiscountType
  discountAmount      Int?
  discountPercentage  Int?
  appliedDiscountType AppliedDiscountType
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  Product Product[]

  Cart Cart[]
}

enum AppliedDiscountType {
  ON_PRODUCT
  MINIMUM_PURCHASE
  BUY_ONE_GET_ONE
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]

  Stock Stock[]
}

model Stock {
  id        Int      @id @default(autoincrement())
  storeId   Int
  store     Store    @relation(fields: [storeId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  stock     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Stock_Flow Stock_Flow[]
}

model Cart {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  cartProducts   CartProduct[]
  discountCartId Int?
  discountCart   Discount?     @relation(fields: [discountCartId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model CartProduct {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart Cart[]
}

model Stock_Flow {
  id        Int       @id @default(autoincrement())
  stockId   Int
  stock     Stock     @relation(fields: [stockId], references: [id])
  flowType  Flow_Type
  amount    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

enum Flow_Type {
  INCOMING
  OUTGOING
}

model Address {
  id         Int      @id @default(autoincrement())
  type       Type
  typeId     Int
  desc       String
  provinceId Int
  cityId     Int
  coor_lat   String
  coor_lng   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

enum Type {
  USER
  STORE
}
